# general ----------
set -as terminal-features ",xterm*:RGB"
set -g default-terminal "tmux-256color"
set -g base-index 1                       # windows start at 1
set -g pane-base-index 1                  # panes start at 1
set -g renumber-windows on                # renumber windows on close
set -g allow-rename off                   # prevent window renaming
set -g mouse on                           # enable mouse control
set -s escape-time 0                      # https://github.com/tmux-plugins/tmux-sensible
set -g history-limit 50000
set -g display-time 4000
set -g status-interval 5
set -g status-keys emacs
set -g focus-events on
setw -g aggressive-resize on

# remove keybinds in favor of menus below ----------
unbind C-b
unbind -n MouseDown3StatusLeft
unbind -n MouseDown3Status
unbind -n MouseDown3Pane

# style ----------
set -g status-interval 60
set -g status-style "bg=#242424,fg=#AAAAAA"
set -g status-left-length 100
set -g status-right-length 100

# custom lua styling
set -g status-position top
set-window-option -g window-status-separator "î‚³"
set -g status-justify "right"
set -g status-left "#($HOME/.tmux/lua.sh left_status)"
set -g window-status-current-format "#($HOME/.tmux/lua.sh current_window)"
set -g window-status-format "#($HOME/.tmux/lua.sh windows)"
set -g status-right "#($HOME/.tmux/lua.sh right_status)"

# clickable ux elements
bind -Troot MouseDown1Status if -F '#{==:#{mouse_status_range},window}' {
    select-window
  } {
      if -F '#{==:#{mouse_status_range},commands_menu}' {
        run-shell -b "$HOME/.tmux/scripts/tmux-commands.sh"
      }

      if -F '#{==:#{mouse_status_range},sessions_menu}' {
        run-shell -b "$HOME/.tmux/scripts/tmux-commands.sh 'Load session'"
      }

      if -F '#{==:#{mouse_status_range},split_right}' {
        run-shell -b "$HOME/.tmux/scripts/tmux-commands.sh 'Split right'"
      }

      if -F '#{==:#{mouse_status_range},split_down}' {
        run-shell -b "$HOME/.tmux/scripts/tmux-commands.sh 'Split down'"
      }

      if -F '#{==:#{mouse_status_range},add_window}' {
        new-window
      }

      if -F '#{==:#{mouse_status_range},first_window}' {
        select-window -t 1
      }

      if -F '#{==:#{mouse_status_range},close_window}' {
        kill-window
      }
}
